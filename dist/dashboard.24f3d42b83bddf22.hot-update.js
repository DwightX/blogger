"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate"]("dashboard",{

/***/ "./src/pages/dashboard/index.css":
/*!***************************************!*\
  !*** ./src/pages/dashboard/index.css ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n    if(true) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1731085061756\n        var cssReload = __webpack_require__(/*! ../../../node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js */ \"./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  \n\n//# sourceURL=webpack:///./src/pages/dashboard/index.css?");

/***/ }),

/***/ "./src/pages/dashboard/index.js":
/*!**************************************!*\
  !*** ./src/pages/dashboard/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.css */ \"./src/pages/dashboard/index.css\");\n/* harmony import */ var bootstrap_icons_font_bootstrap_icons_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bootstrap-icons/font/bootstrap-icons.css */ \"./node_modules/bootstrap-icons/font/bootstrap-icons.css\");\n\n\n\n\nconst submitPost = document.getElementById(\"submit\")\n\nasync function fetchBlogPosts() {\n    try {\n        const response = await fetch('https://node-api-atjf.onrender.com/post', {\n            method: 'GET',\n            headers: {\n                'Authorization': 'Bearer ' + localStorage.getItem('authToken'),\n                'Content-Type': 'application/json',\n            },\n        });\n    \n        if (!response.ok) {\n            throw new Error('Network response was not ok ' + response.statusText);\n        }\n    \n        const blogPost = await response.json();\n        const blogPostSection = document.getElementById(\"blog-post-section\");\n    \n        // Clear existing posts to prevent duplicates\n        blogPostSection.innerHTML = '';\n    \n        // Store current post ID for modal\n        let currentPostId = null;\n        let currentPostContainer = null;\n    \n        blogPost.forEach(post => {\n            // Create main container with card styling\n            const blogPostContainer = document.createElement(\"div\");\n            blogPostContainer.className = \"ml-6 mb-6 w-full max-w-2xl rounded-lg border bg-white shadow-sm\";\n        \n            // Create card header\n            const cardHeader = document.createElement(\"div\");\n            cardHeader.className = \"p-6\";\n        \n            // Create header content wrapper\n            const headerContent = document.createElement(\"div\");\n            headerContent.className = \"flex items-center justify-between\";\n        \n            // Create and style title\n            const blogPostTitle = document.createElement(\"h2\");\n            blogPostTitle.className = \"text-2xl font-bold text-gray-900\";\n            blogPostTitle.innerHTML = post.title;\n        \n            // Create date wrapper\n            const dateWrapper = document.createElement(\"div\");\n            dateWrapper.className = \"flex items-center space-x-2 text-gray-500\";\n        \n            // Create calendar icon\n            const calendarIcon = document.createElement(\"span\");\n            calendarIcon.innerHTML = \"â—·\";\n            calendarIcon.className = \"h-4 w-4\";\n        \n            // Create and style date\n            const blogPostDate = document.createElement(\"span\");\n            blogPostDate.className = \"text-sm\";\n            blogPostDate.innerHTML = post.date;\n        \n            // Create card content\n            const cardContent = document.createElement(\"div\");\n            cardContent.className = \"px-6 pb-4\";\n        \n            // Create and style body text\n            const blogPostBody = document.createElement(\"p\");\n            blogPostBody.className = \"text-gray-600\";\n            blogPostBody.innerHTML = post.body;\n        \n            // Create card footer\n            const cardFooter = document.createElement(\"div\");\n            cardFooter.className = \"flex justify-end space-x-2 px-6 pb-6\";\n        \n            // Create and style edit button\n            const editButton = document.createElement(\"button\");\n            editButton.className = \"px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\";\n            editButton.innerHTML = \"Edit\";\n        \n            // Create and style delete button\n            const deleteModalOpen = document.createElement(\"button\");\n            deleteModalOpen.className = \"px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500\";\n            deleteModalOpen.innerHTML = \"Delete\";\n        \n            // Set data attributes\n            deleteModalOpen.setAttribute(\"data-post-id\", post._id);\n            editButton.setAttribute(\"data-post-id\", post._id);\n        \n            // Add event listeners\n            deleteModalOpen.addEventListener(\"click\", () => {\n                currentPostId = post._id;\n                currentPostContainer = blogPostContainer;\n                const modalOverlay = document.getElementById('modalOverlay');\n                modalOverlay.classList.remove('hidden');\n            });\n    \n            editButton.addEventListener(\"click\", () => {\n                const modalOverlay = document.getElementById('editModalOverlay');\n                const titleField = document.getElementById('editModalTitle');\n                const bodyField = document.getElementById('editModalBody');\n                \n                // Populate the modal with the current post's title and body\n                titleField.value = post.title;\n                bodyField.value = post.body;\n                currentPostId = post._id;\n                currentPostContainer = blogPostContainer;\n    \n                // Show the edit modal\n                modalOverlay.classList.remove('hidden');\n            });\n        \n            // Assemble the card structure\n            dateWrapper.append(calendarIcon, blogPostDate);\n            headerContent.append(blogPostTitle, dateWrapper);\n            cardHeader.append(headerContent);\n            cardContent.append(blogPostBody);\n            cardFooter.append(editButton, deleteModalOpen);\n        \n            // Assemble the main container\n            blogPostContainer.append(cardHeader, cardContent, cardFooter);\n        \n            // Add to the blog section\n            blogPostSection.append(blogPostContainer);\n        });\n    \n        // Modal event listeners (outside forEach loop)\n        const deletePostBtn = document.getElementById('deletePostBtn');\n        const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');\n        const cancelEditBtn = document.getElementById('cancelEditBtn');\n        const saveChangesBtn = document.getElementById('saveChangesBtn');\n        const modalOverlay = document.getElementById('modalOverlay');\n        const editModalOverlay = document.getElementById('editModalOverlay');\n        \n        // Function to close modal and reset current post data\n        const closeModal = () => {\n            modalOverlay.classList.add('hidden');\n            editModalOverlay.classList.add('hidden');\n            currentPostId = null;\n            currentPostContainer = null;\n        };\n    \n        // Single event listener for delete confirmation\n        deletePostBtn.addEventListener('click', () => {\n            if (currentPostId && currentPostContainer) {\n                modalOverlay.classList.add('hidden');\n                deletePost(currentPostId, currentPostContainer);\n                currentPostId = null;\n                currentPostContainer = null;\n            }\n        });\n    \n        // Save changes event listener for edit modal\n        saveChangesBtn.addEventListener('click', () => {\n            const titleField = document.getElementById('editModalTitle').value;\n            const bodyField = document.getElementById('editModalBody').value;\n            if (currentPostId) {\n                // Here you would send a PUT request or update the post logic\n                editPost(currentPostId, titleField, bodyField);\n                closeModal();\n            }\n        });\n    \n        // Add event listener for cancel button in edit modal\n        cancelEditBtn.addEventListener('click', closeModal);\n    \n        // Add event listener for cancel button in delete modal\n        cancelDeleteBtn.addEventListener('click', closeModal);\n    \n        // Optional: Close modal when clicking outside\n        modalOverlay.addEventListener('click', (e) => {\n            if (e.target === modalOverlay) {\n                closeModal();\n            }\n        });\n        editModalOverlay.addEventListener('click', (e) => {\n            if (e.target === editModalOverlay) {\n                closeModal();\n            }\n        });\n    \n    } catch (error) {\n        console.error('Error:', error);\n    }\n    \n}\n\n// Create new posts\nasync function createNewPost(event) {\n    event.preventDefault(); // Prevent form submission if button is in a form\n    \n    const titleField = document.getElementById(\"titleField\");\n    const bodyField = document.getElementById(\"bodyField\");\n\n    try {\n        const response = await fetch('https://node-api-atjf.onrender.com/post', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                title: titleField.value,\n                body: bodyField.value,\n            })\n        });\n\n        if (!response.ok) {\n            throw new Error('Network response was not ok ' + response.statusText);\n        }\n\n        const data = await response.json();\n        console.log(data);\n        \n        // Clear the form fields\n        titleField.value = '';\n        bodyField.value = '';\n        \n        // Refresh the posts\n        await fetchBlogPosts();\n        \n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n// Create new post\nasync function editPost(currentPostId,titleField,bodyField) {\n    \n    try {\n        const response = await fetch(`https://node-api-atjf.onrender.com/post/${currentPostId}`, {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                title: titleField,\n                body: bodyField,\n            })\n        });\n\n        if (!response.ok) {\n            throw new Error('Network response was not ok ' + response.statusText);\n        }\n\n        const data = await response.text();\n        console.log(data);\n        \n        // Clear the form fields\n        titleField = '';\n        bodyField = '';\n        \n        // Refresh the posts\n        await fetchBlogPosts();\n        \n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n// Delete post\nasync function deletePost(postId, containerElement) {\n    try {\n        const response = await fetch(`https://node-api-atjf.onrender.com/post/${postId}`, {\n            method: 'DELETE',\n        });\n\n        if (!response.ok) {\n            throw new Error('Network response was not ok ' + response.statusText);\n        }\n\n        // Remove the post from the DOM after successful deletion\n        containerElement.remove();\n        \n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\n// Add event listener to submit button\nif (submitPost) {\n    submitPost.addEventListener(\"click\", createNewPost);\n}\n\n\n\n// Close modal on overlay click\nmodalOverlay.addEventListener('click', (e) => {\n  if (e.target === modalOverlay) {\n    modalOverlay.classList.add('hidden');\n  }\n});\n// Initial fetch of blog posts\nfetchBlogPosts();\n\n//# sourceURL=webpack:///./src/pages/dashboard/index.js?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("f2c466b7a104e547")
/******/ })();
/******/ 
/******/ }
);